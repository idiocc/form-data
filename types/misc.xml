<types namespace="_multipart">
  <type
    type="function(http.IncomingMessage, _multipart.FormDataFile): !Promise<boolean>"
    name="FormDataFileFilter"
    desc="The function to control which files are accepted." />

  <type name="FormData" desc="An instance to create middleware." noToc>
    <prop type="function(string): _goa.Middleware" name="single">
      Accept a single file. The first argument is the name of the field.
    </prop>
    <prop type="function(string, number): _goa.Middleware" name="array">
      Accept multiple files. The first argument is the name of the field, and the second argument is the max number of files.
    </prop>
    <prop type="function(!Array<_multipart.FormDataField>): _goa.Middleware" name="fields">
      Accept files according to the configured fields.
    </prop>
    <prop type="function(): _goa.Middleware" name="none">
      Do not accept files, only fields.
    </prop>
    <prop type="function(): _goa.Middleware" name="any">
      Accept any fields and files.
    </prop>
  </type>

  <type interface name="FormDataStorageEngine">
    <prop type="function(!http.IncomingMessage, _multipart.FormDataFile): !Promise" name="_handleFile">
      Saves the file asynchronously.
    </prop>
    <prop type="function(!http.IncomingMessage, _multipart.FormDataFile): !Promise" name="_removeFile">
      Removes the file asynchronously.
    </prop>
  </type>

  <type name="FormDataField" desc="The item to use in the `.fields` method.">
    <prop name="name" string>The name of the field.</prop>
    <prop opt name="maxCount" number>The maximum count of the field.</prop>
  </type>
  <type name="FormDataError" desc="An error object which extends Error.">
    <prop name="code" string>The error code.</prop>
    <prop opt name="field" string>The field which resulted in error.</prop>
  </type>

  <import
    name="IncomingMessage"
    from="http"
    link="https://nodejs.org/api/http.html#http_class_http_incomingmessage"
    desc="The Node.JS http server request object."
  />
</types>