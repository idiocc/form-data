<types namespace="_multipart">
  <import name="BusBoyLimits" ns="_goa" from="@goa/busboy" link="https://github.com/idiocc/busboy#type-_goabusboylimits" desc="Various limits on incoming data."/>

  <type
    type="function(http.IncomingMessage, _multipart.FormDataFile): !Promise<boolean>"
    name="FormDataFileFilter"
    desc="The function to control which files are accepted." />

  <type name="FormDataConfig" noToc>
    <prop opt string name="dest">
      The directory where to store the files using the `DiskStorage`.
    </prop>
    <prop opt type="_multipart.FormDataStorageEngine" name="storage">
      An _instance_ of a custom storage engine.
    </prop>
    <prop opt type="_multipart.FormDataFileFilter" name="fileFilter">
      The file filter.
    </prop>
    <prop opt type="_goa.BusBoyLimits" name="limits">
      The limits of the uploaded data.
    </prop>
    <prop boolean name="preservePath" default="false">
      Whether to keep the full path of files instead of just the base name.
    </prop>
  </type>

  <type name="FormData">
    <prop type="function(string): _goa.Middleware" name="single">
      Accept a single file. The first argument is the name of the field.
    </prop>
    <prop type="function(string, number): _goa.Middleware" name="array">
      Accept multiple files. The first argument is the name of the field, and the second argument is the max number of files.
    </prop>
    <prop type="function(!Array<_multipart.FormDataField>): _goa.Middleware" name="fields">
      Accept files according to the configured fields.
    </prop>
    <prop type="function(): _goa.Middleware" name="none">
      Do not accept files, only fields.
    </prop>
    <prop type="function(): _goa.Middleware" name="any">
      Accept any fields and files.
    </prop>
  </type>

  <type interface name="FormDataStorageEngine">
    <prop type="function(!http.IncomingMessage, _multipart.FormDataFile): !Promise" name="_handleFile">
      Saves the file asynchronously.
    </prop>
    <prop type="function(!http.IncomingMessage, _multipart.FormDataFile): !Promise" name="_removeFile">
      Removes the file asynchronously.
    </prop>
  </type>

  <type record name="FormDataFile" desc="The information about each file.">
    <prop name="fieldname" string>
      The field name specified in the form.
    </prop>
    <prop name="originalname" string>
      The name of the file on the user's computer.
    </prop>
    <prop name="encoding" string>
      The encoding type of the file.
    </prop>
    <prop name="mimetype" string>
      The mime type of the file.
    </prop>
    <prop name="size" number>
      The size of the file in bytes.
    </prop>
    <prop name="destination" string>
      The folder to which the file has been saved. Set by _DiskStorage_.
    </prop>
    <prop name="filename" string>
      The name of the file within the `destination`. Set by _DiskStorage_.
    </prop>
    <prop name="path" string>
      The full path to the uploaded file. Set by _DiskStorage_.
    </prop>
    <prop name="buffer" type="Buffer">
      The `Buffer` of the entire file. Set by _MemoryStorage_.
    </prop>
    <prop name="stream" type="stream.Readable">
      The _Readable_ stream with the file data. This stream should not be read other than by a storage engine.
    </prop>
  </type>

  <type name="FormDataField" desc="The item to use in the .fields method.">
    <prop name="name" string>The name of the field.</prop>
    <prop opt name="maxCount" number>The maximum count of the field.</prop>
  </type>
  <type name="FormDataError" desc="An error object which extends Error.">
    <prop name="code" string>The error code.</prop>
    <prop opt name="field" string>The field which resulted in error.</prop>
  </type>

  <import
    name="IncomingMessage"
    from="http"
    link="https://nodejs.org/api/http.html#http_class_http_incomingmessage"
  />
  <import name="Stats" from="fs"
    link="https://nodejs.org/api/fs.html#fs_class_fs_stats" />
  <import name="Readable" from="stream" />
</types>